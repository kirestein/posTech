ls
dir
clear
cls
dados <- read.csv(file = path)
path <- "/home/erik_proenca/Documentos/posTech/R/dados"
view(dados)
View(dados)
dados <- read.csv(file = path)
path <- "/home/erik_proenca/Documentos/posTech/R/dados/googleplaystore.csv"
View(dados)
dados <- read.csv(file = path)
View(dados)
View(dados)
str(dados)
path <- "/home/erik_proenca/Documentos/posTech/R/dados/googleplaystore.csv"
dados <- read.csv(file = path)
install.packages("dplyr")
library(dplyr)
install.packages("ggplot2") # Package to view the graphics
library(ggplot2)
hist(dados$Rating)
table(dados$Rating)
hist(dados$Rating, xlim = range(1,5))
ggplot(data = dados) + geom_histogram(mapping = aes(x = Rating))
# utilizando o ggplot para visualizar um gráfico. Utilizamos o "+" para concatenar duas funções
ggplot(data = dados) + geom_histogram(mapping = aes(x = Rating)) + xlim(c(1,5))
# utilizando o ggplot para visualizar um gráfico. Utilizamos o "+" para concatenar duas funções
ggplot(data = dados) + geom_histogram(mapping = aes(x = Rating), na.rm = TRUE) + xlim(c(1,5))
# utilizando o ggplot para visualizar um gráfico. Utilizamos o "+" para concatenar duas funções
ggplot(data = dados) + geom_histogram(mapping = aes(x = Rating), na.rm = TRUE, breaks = seq(1,5)) + xlim(c(1,5))
# utilizando o ggplot para visualizar um gráfico. Utilizamos o "+" para concatenar duas funções
rating.histogram <- ggplot(data = dados) + geom_histogram(mapping = aes(x = Rating), na.rm = TRUE, breaks = seq(1,5)) + xlim(c(1,5))
rating.histogram
path = "/home/erik_proenca/Documentos/posTech/R/dados/database.csv"
dados_notas <- read.csv(path)
library(dplyr)
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("ggplot2")
install.packages("ggplot2")
library(dplyr)
library(ggplot2)
# histogram with 5 bins
five.bins <- ggplot(data=dados_notas) + geom_histogram(mapping = aes(x = nota_aluno), na.rm = TRUE, binwidth = 2) + labs(title = "Histograma de notas - 5 bins",
x = "Nota",
y = "Frequência")
five.bins
rating.histogram <- ggplot(notas, aes(x = nota_aluno)) +
geom_histogram(binwidth = 2) +
labs(title = "Histograma de notas - 5 bins",
x = "Nota",
y = "Frequência")
rating.histogram <- ggplot(dados_notas, aes(x = nota_aluno)) +
geom_histogram(binwidth = 2) +
labs(title = "Histograma de notas - 5 bins",
x = "Nota",
y = "Frequência")
rating.histogram
rating.histogram <- ggplot(dados_notas) +
geom_histogram(aes(x = nota_aluno), binwidth = 2) +
labs(title = "Histograma de notas - 5 bins",
x = "Nota",
y = "Frequência")
rating.histogram
five.bins <- ggplot(data=dados_notas) + geom_histogram(mapping = aes(x = nota_aluno), na.rm = TRUE, binwidth = 2) + labs(title = "Histograma de notas - 5 bins",
x = "Nota",
y = "Frequência")
five.bins
five.bins <- ggplot(data=dados_notas) + geom_histogram(mapping = aes(x = nota_aluno), na.rm = TRUE) + labs(title = "Histograma de notas - 5 bins",
x = "Nota",
y = "Frequência")
five.bins
hist(dados_notas$nota_aluno) # Cria um histograma
path = "/home/erik_proenca/Documentos/posTech/R/dados/database.csv"
dados_notas <- read.csv(path)
hist(dados_notas$nota_aluno) # Cria um histograma
path = "/home/erik_proenca/Documentos/posTech/R/dados/database.csv"
dados_notas <- read.csv(path)
hist(dados_notas$nota_aluno) # Cria um histograma
five.bins <- ggplot(data=dados_notas) + geom_histogram(mapping = aes(x = nota_aluno), na.rm = TRUE) + labs(title = "Histograma de notas - 5 bins",
x = "Nota",
y = "Frequência")
library(dplyr)
library(ggplot2)
# histogram with 5 bins
five.bins <- ggplot(data=dados_notas) + geom_histogram(mapping = aes(x = nota_aluno), na.rm = TRUE) + labs(title = "Histograma de notas - 5 bins",
x = "Nota",
y = "Frequência")
five.bins
ten.seq <- ggplot(data = dados_notas) +
geom_histogram(mapping = aes(x = nota_aluno), na.rm = TRUE, breaks = seq(0,10)) +
xlim(c(0,10))
ten.seq
ggplot(data = dados) +
geom_bar(mapping = aes(x = category), stat = "count")
ggplot(data = dados) +
geom_bar(mapping = aes(x = Category), stat = "count")
dados) +
geom_bar(mapping = aes(x = Category), stat = "count") +
coord_flip(
ggplot(data = dados) +
geom_bar(mapping = aes(x = Category), stat = "count") +
coord_flip(
ggplot(data = dados) +
geom_bar(mapping = aes(x = Category), stat = "count") +
coord_flip()
ggplot(data = dados) +
geom_bar(mapping = aes(x = Category), stat = "count") +
coord_flip()
ggplot(data = dados) +
geom_bar(mapping = aes(x = Category), stat = "count") +
coord_flip()
category.Freq = data.frame(table(dados$Category))
View(category.Freq)
View(category.Freq)
ggplot(data = category.Freq) +
geom_bar(mapping = aes(x = Var1, y = Freq), stat = "identity")
category.Freq) +
geom_bar(mapping = aes(x = Var1, y = Freq), stat = "identity") +
coord_flip()
ggplot(data = category.Freq) +
geom_bar(mapping = aes(x = Var1, y = Freq), stat = "identity") +
coord_flip()
ggplot(data = category.Freq) +
geom_bar(mapping = aes(x = reorder(Var1, Freq), y = Freq), stat = "identity") +
coord_flip()
ggplot(data = category.Freq) +
geom_bar(mapping = aes(x = reorder(Var1, -Freq), y = Freq), stat = "identity") + # Para reorganizar em ordem decrescente é só usar o -Freq
coord_flip()
ggplot(data = category.Freq) +
geom_bar(mapping = aes(x = reorder(Var1, Freq), y = Freq), stat = "identity") + # A função reorder organiza em ordem crescente
coord_flip()
category.Top10 <- category.Freq[(order(category.Freq$Freq)), ]
View(category.Top10)
View(category.Top10)
category.Top10 <- category.Freq[(order(-category.Freq$Freq)), ]
category.Top10 <- category.Top10[1:10,]
ggplot(data = category.Top10) +
geom_bar(mapping = aes(x = reorder(Var1, Freq), y = Freq), stat = "identity") + # A função reorder organiza em ordem crescente
coord_flip()
View(dados_notas)
View(dados)
# primeiro ponto é criar um novo registro
dados_2 <- dados %>% filter(Category != "1.9")
dados_2 <- dados %>% filter(Category != "1.9")
# exite uma inconsistência nos dados, pois existe uma categoria 1.9 e uma nota de apps 19, vamos tratar esses valores
library(dplyr)
# primeiro ponto é criar um novo registro
dados_2 <- dados %>% filter(Category != "1.9")
View(dados_2)
View(dados_2)
min(dados_2$Rating)
max(dados_2$Rating)
dados_2 %>% filter(is.na(Rating))
dados_2 %>% filter(is.na(Rating)) %>% count()
summary(dados_2$Rating)
dados_2 %>% filter(is.na(Rating)) %>% group_by(Category) %>% count()
%>% group_by(Category) %>%
count() %>%
summarise(media = mean(Rating))
dados_2 %>% filter(is.na(Rating)) %>% group_by(Category) %>%
count() %>%
summarise(media = mean(Rating))
dados_2 %>% filter(is.na(Rating)) %>% group_by(Category) %>%
count() %>%
summarise(media = mean(n))
summary(dados_2$Rating) # a função summary traz para nós os valores de máximo e mínimo da coluna desejada, 1º quartie, Mediana, Média, 3º quartie, e a quantidade de NA's
dados_2 %>% filter(!is.na(Rating)) %>% group_by(Category) %>%
summarise(media = mean(Rating))
summary(dados_2$Rating) # a função summary traz para nós os valores de máximo e mínimo da coluna desejada, 1º quartie, Mediana, Média, 3º quartie, e a quantidade de NA's
mean.Category = dados_2 %>%
filter(!is.na(Rating)) %>%
group_by(Category) %>%
summarise(media = mean(Rating))
mean.Category <- dados_2 %>%
filter(!is.na(Rating)) %>%
group_by(Category) %>%
summarise(media = mean(Rating))
# exite uma inconsistência nos dados, pois existe uma categoria 1.9 e uma nota de apps 19, vamos tratar esses valores
library(dplyr)
mean.Category <- dados_2 %>%
filter(!is.na(Rating)) %>%
group_by(Category) %>%
summarise(media = mean(Rating))
mean.Category
for(i in 1:nrow(dados_2)){
if(is.na(dados_2[i, "Rating"])){
dados_2[i, "newRating"] <- mean.Category[mean.Category$Category == dados_2[i, "Categoty"], "mean"] # não é aconselhavél eliminar o conjunto de dados originais, o indicado é criar uma nova coluna
}else{
dados_2[i, "newRating"] <- dados_2[i, "Rating"]
}
}
for(i in 1:nrow(dados_2)){
if(is.na(dados_2[i, "Rating"])){
dados_2[i, "newRating"] <- mean.Category[mean.Category$Category == dados_2[i, "Categoty"], "mean"] # não é aconselhavél eliminar o conjunto de dados originais, o indicado é criar uma nova coluna
}else{
dados_2[i, "newRating"] <- dados_2[i, "Rating"]
}
}
for(i in 1:nrow(dados_2)){
if(is.na(dados_2[i, "Rating"])){
dados_2[i, "newRating"] <- mean.Category[mean.Category$Category == dados_2[i, "Categoty"], "media"] # não é aconselhavél eliminar o conjunto de dados originais, o indicado é criar uma nova coluna
}else{
dados_2[i, "newRating"] <- dados_2[i, "Rating"]
}
}
for(i in 1:nrow(dados_2)){
if(is.na(dados_2[i, "Rating"])){
dados_2[i, "newRating"] <- mean.Category[mean.Category$Category == dados_2[i, "Category"], "media"] # não é aconselhavél eliminar o conjunto de dados originais, o indicado é criar uma nova coluna
}else{
dados_2[i, "newRating"] <- dados_2[i, "Rating"]
}
}
View(dados_2)
View(dados_2)
library(ggplot2)
summary(dados_2$newRating)
min(dados_2$newRating)
max(dados_2$newRating)
dados_2 %>%
mutate(rating_class = if_else(newRating <= 2, "ruim",
if_else(newRating >= 4, "bom", "regular")))
View(dados_2)
View(dados_2)
dados_2 <- dados_2 %>%
mutate(rating_class = if_else(newRating <= 2, "ruim",
if_else(newRating >= 4, "bom", "regular")))
geom_bar(aes(rating_class), stat = "count")
ggplot(dados_2) +
geom_bar(aes(rating_class), stat = "count")
library(dplyr)
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("ggplot2")
install.packages("ggplot2")
library(dplyr)
library(ggplot2)
# vamos trabalhar com o lubridate para trabalhar com datas
install.packages("lubridate")
library(lubridate)
dmy(08142023)
dmy(14032023)
mdy(08142023)
hms(1741)
hms(174100)
hms(054100)
hms("05:41:00")
hms(05:41:00)
hms(54100)
hms("17:41:00")
mdy_hms(08142023180100)
hms(180100)
hms(... = 180200)
hms(... = 18:02:00)
hms(... = "18:02:00")
hour(18)
hour("18")
hour("06")
hour("6")
hours(18)
library(data.table)
install.packages("data.table")
install.packages("data.table")
library(data.table)
library(dplyr)
library(ggplot2)
# -------------------------- CARREGANDO OS DADOS --------------------------
merge_enem <- rbind(enem_2010, enem_2011, enem_2012, enem_2013, enem_2014, enem_2015, enem_2016, enem_2017)
")
enem_2011 <- fread("dataviz_mult_var-dados/enem_2011.csv", encoding="UTF-8")
enem_2012 <- fread("dataviz_mult_var-dados/enem_2012.csv", encoding="UTF-8")
enem_2013 <- fread("dataviz_mult_var-dados/enem_2013.csv", encoding="UTF-8")
enem_2014 <- fread("dataviz_mult_var-dados/enem_2014.csv", encoding="UTF-8")
enem_2015 <- fread("dataviz_mult_var-dados/enem_2015.csv", encoding="UTF-8")
enem_2016 <- fread("dataviz_mult_var-dados/enem_2016.csv", encoding="UTF-8")
enem_2017 <- fread("dataviz_mult_var-dados/enem_2017.csv", encoding="UTF-8")
install.packages("dplyr")
install.packages("dplyr")
install.packages("ggplot2")
library(dplyr)
library(ggplot2)
install.packages("ggplot2")
# -------------------------- CARREGANDO OS DADOS --------------------------
enem_2010 <- fread("dataviz_mult_var-dados/enem_2010.csv", encoding="UTF-8")
getwd() # aqui consultamos o diretório onde estamos trabalhando
setwd("/home/erik_proenca/Documentos/posTech/R/DataVisualizationPart2_grafico_com_multivariaveis") # aqui setamos o diretório onde queremos trabalhar
# -------------------------- CARREGANDO OS DADOS --------------------------
enem_2010 <- fread("dataviz_mult_var-dados/enem_2010.csv", encoding="UTF-8")
enem_2011 <- fread("dataviz_mult_var-dados/enem_2011.csv", encoding="UTF-8")
enem_2012 <- fread("dataviz_mult_var-dados/enem_2012.csv", encoding="UTF-8")
enem_2013 <- fread("dataviz_mult_var-dados/enem_2013.csv", encoding="UTF-8")
enem_2014 <- fread("dataviz_mult_var-dados/enem_2014.csv", encoding="UTF-8")
enem_2015 <- fread("dataviz_mult_var-dados/enem_2015.csv", encoding="UTF-8")
enem_2016 <- fread("dataviz_mult_var-dados/enem_2016.csv", encoding="UTF-8")
enem_2017 <- fread("dataviz_mult_var-dados/enem_2017.csv", encoding="UTF-8")
# -------------------------- CARREGANDO OS DADOS --------------------------
merge_enem <- rbind(enem_2010, enem_2011, enem_2012, enem_2013, enem_2014, enem_2015, enem_2016, enem_2017)
View(enem_2010)
# ---------------------------------------------------- ERRO ----------------------------------------------------
#Error in rbindlist(l, use.names, fill, idcol) :
#  Item 2 has 27 columns, inconsistent with item 1 which has 23 columns. To fill missing columns use fill=TRUE.
# ---------------------------------------------------- ERRO ----------------------------------------------------
merge_enem <- rbind(enem_2010, enem_2011, enem_2012, enem_2013, enem_2014, enem_2015, enem_2016, enem_2017, fill = TRUE)
rm(enem_2010, enem_2011, enem_2012, enem_2013, enem_2014, enem_2015, enem_2016, enem_2017)
View(merge_enem)
